// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ai_it_wiki.Data;

#nullable disable

namespace ai_it_wiki.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250321154220_userdata")]
    partial class userdata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ai_it_wiki.Models.Dialog", b =>
                {
                    b.Property<string>("DialogId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<int>("TokensSpent")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("DialogId");

                    b.HasIndex("UserId");

                    b.ToTable("Dialogs");
                });

            modelBuilder.Entity("ai_it_wiki.Models.DialogMessage", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<string>("DialogId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Sender")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("MessageId");

                    b.HasIndex("DialogId");

                    b.ToTable("DialogMessages");
                });

            modelBuilder.Entity("ai_it_wiki.Models.DialogSettings", b =>
                {
                    b.Property<string>("DialogId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Language")
                        .HasColumnType("longtext");

                    b.Property<int>("MaxTokens")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("longtext");

                    b.Property<double>("Temperature")
                        .HasColumnType("double");

                    b.HasKey("DialogId");

                    b.ToTable("DialogSettings");
                });

            modelBuilder.Entity("ai_it_wiki.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AccessKey")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAuthenticated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ai_it_wiki.Models.UserActionData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UserActionsData");
                });

            modelBuilder.Entity("ai_it_wiki.Services.Kwork.Models.KworkUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("KworkUsers");
                });

            modelBuilder.Entity("ai_it_wiki.Services.Kwork.Models.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "category_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "price");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "profile_picture");

                    b.Property<int>("TimeLeft")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "time_left");

                    b.Property<string>("Title")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "title");

                    b.Property<int>("UserActiveProjectsCount")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "user_active_projects_count");

                    b.Property<int>("UserHiredPercent")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "user_hired_percent");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "user_id");

                    b.Property<string>("Username")
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "username");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("ai_it_wiki.Models.Dialog", b =>
                {
                    b.HasOne("ai_it_wiki.Models.User", "User")
                        .WithMany("Dialogs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ai_it_wiki.Models.DialogMessage", b =>
                {
                    b.HasOne("ai_it_wiki.Models.Dialog", "Dialog")
                        .WithMany("Messages")
                        .HasForeignKey("DialogId");

                    b.Navigation("Dialog");
                });

            modelBuilder.Entity("ai_it_wiki.Models.DialogSettings", b =>
                {
                    b.HasOne("ai_it_wiki.Models.Dialog", "Dialog")
                        .WithOne("Settings")
                        .HasForeignKey("ai_it_wiki.Models.DialogSettings", "DialogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dialog");
                });

            modelBuilder.Entity("ai_it_wiki.Services.Kwork.Models.Proposal", b =>
                {
                    b.HasOne("ai_it_wiki.Services.Kwork.Models.KworkUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ai_it_wiki.Models.Dialog", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("ai_it_wiki.Models.User", b =>
                {
                    b.Navigation("Dialogs");
                });
#pragma warning restore 612, 618
        }
    }
}
